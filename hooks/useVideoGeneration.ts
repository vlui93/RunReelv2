import { useState } from 'react';
import { supabase } from '@/lib/supabase';
import { tavusService } from '@/services/tavusService';
import { useAuth } from './useAuth';

export interface VideoGenerationState {
  isGenerating: boolean;
  progress: string;
  error: string | null;
  videoUrl: string | null;
}

export function useVideoGeneration() {
  const { user } = useAuth();
  const [state, setState] = useState<VideoGenerationState>({
    isGenerating: false,
    progress: '',
    error: null,
    videoUrl: null,
  });

  const generateVideo = async (runId: string, runData: any, replicaId?: string) => {
    if (!user) return;

    setState({
      isGenerating: true,
      progress: 'Initializing video generation...',
      error: null,
      videoUrl: null,
    });

    try {
      // Create video generation record
      const { data: videoGeneration, error: insertError } = await supabase
        .from('video_generations')
        .insert({
          run_id: runId,
          status: 'pending',
        })
        .select()
        .single();

      if (insertError) {
        throw new Error('Failed to create video generation record');
      }

      setState(prev => ({
        ...prev,
        progress: 'Requesting video generation from Tavus...',
      }));

      // Generate video using Tavus
      const videoRequest = {
        replicaId: replicaId || 'default-replica',
        script: '', // Will be generated by the service
        runData: {
          distance: runData.distance,
          duration: runData.duration,
          pace: runData.average_pace,
          calories: runData.calories,
        },
        effortLevel: runData.effort_level,
        mood: runData.mood_rating,
      };

      const tavusResponse = await tavusService.generateVideo(videoRequest);

      // Update video generation record with Tavus job ID
      await supabase
        .from('video_generations')
        .update({
          tavus_job_id: tavusResponse.video_id,
          status: 'processing',
        })
        .eq('id', videoGeneration.id);

      setState(prev => ({
        ...prev,
        progress: 'Video is being processed...',
      }));

      // Poll for completion
      const completedVideo = await tavusService.pollVideoCompletion(
        tavusResponse.video_id,
        30, // max attempts
        3000 // 3 second intervals
      );

      if (completedVideo.status === 'completed' && completedVideo.video_url) {
        // Update records with final video URL
        await Promise.all([
          supabase
            .from('video_generations')
            .update({
              status: 'completed',
              video_url: completedVideo.video_url,
            })
            .eq('id', videoGeneration.id),
          
          supabase
            .from('runs')
            .update({
              video_url: completedVideo.video_url,
            })
            .eq('id', runId)
        ]);

        setState({
          isGenerating: false,
          progress: 'Video generation completed!',
          error: null,
          videoUrl: completedVideo.video_url,
        });

        return completedVideo.video_url;
      } else {
        throw new Error('Video generation failed');
      }

    } catch (error) {
      console.error('Video generation error:', error);
      
      setState({
        isGenerating: false,
        progress: '',
        error: error instanceof Error ? error.message : 'Video generation failed',
        videoUrl: null,
      });

      // Update video generation record with error
      await supabase
        .from('video_generations')
        .update({
          status: 'failed',
        })
        .eq('run_id', runId);

      throw error;
    }
  };

  const resetState = () => {
    setState({
      isGenerating: false,
      progress: '',
      error: null,
      videoUrl: null,
    });
  };

  return {
    ...state,
    generateVideo,
    resetState,
  };
}